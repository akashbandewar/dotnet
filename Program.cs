using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
/*Create the following classes
Employee
   Prop	
	string Name -> no blanks
	int EmpNo -> readonly, autogenerated
	short DeptNo -> > 0
    abstract decimal Basic
   Methods
    abstract decimal CalcNetSalary()
Manager: Employee
  Prop
    string Designation -> cant be blank
GeneralManager : Manager
   Prop
 	string Perks -> no validations
CEO : Employee
      Make CalNetSalary() a sealed method
NOTE : Overloaded constructors in all classes calling their base class constructor
All classes must implement IDbFunctions interface
All classes to override the abstract members defined in the base class(Employee).
Basic property to have different validation in different classes.*/

namespace Assignment2
{
    class Program
    {
        static void Main(string[] args)
        {

        }
    }

    public abstract class Employee
    {
        private string name;
        private int empNo;
        private short deptNo;
        protected decimal basic;
        private static int emp;

        #region property
        public string Name
        {
            set
            {
                if (value == "")
                    name = "default name";
                else
                    name = value;
            }

            get
            {
                return name;                                                                                                                                                                                       
            }
        }

        public int EmpNo
        {
            get
            {
                return empNo;
            }
        }

        public short DeptNo
        {
            set
            {
                if (value == 0)
                    deptNo = 1;
                else
                    deptNo = value;
            }

            get
            {
                return deptNo;
            }
        }

        public abstract decimal Basic
        {
            set;

            get;
        }
        #endregion property

        #region constructor
        public Employee(string name = "Default name", short deptNo = 1 ,short basic = 1000)
        {
            emp++;
            this.empNo = emp;
            this.Name = name;
            this.DeptNo = deptNo;
            this.Basic = basic;
        }
        #endregion constructor

        #region method
        public abstract decimal CalcNetSalary();
        #endregion method
    }

    public class Manager : Employee
    {
        private string designation;

        #region ManagerProp
        public string Designation
        {
            set
            {
                if (value == "")
                    designation = "Default Designation";
                else
                    designation = value;
            }
            get
            {
                return designation;
            }
        }
        
        public override decimal Basic 
        {
            get 
            {
                return basic;
            }

            set 
            {
                if (value < 1000)
                    basic = 1000;
                else
                    basic = value;
            }
            
        }
        #endregion ManagerProp

        #region Managerctor
        public Manager(string name, short deptNo, short basic, string designation = "General Manager") : base(name, deptNo,basic)
        {
            this.Designation = designation;
        }
        #endregion Managerctor

        #region ManagerMethod
        public override decimal CalcNetSalary()
        {
            return (basic * 1.1M);
        }
        #endregion ManagerMethod
    }

    public class GeneralManager : Manager
    {
        private string perks;

        #region GMprop
        public string Perks
        {
            get
            {
                return perks;
            }
            set
            {
                perks = value;
            }
        }
        #endregion GMprop

        #region GMctor
        public GeneralManager(string name, short deptNo, short basic, string designation, string perks="default perks") : base(name, deptNo, basic, designation)
        {
            this.Perks = perks;
        }
        #endregion GMctor
    }

    public class CEO : Employee
    {
        #region CEOprop
        public override decimal Basic
        {
            get
            {
                return basic;
            }

            set
            {
                if (value < 1000)
                    basic = 1000;
                else
                    basic = value;
            }

        }
        #endregion CEOProp

        #region CEOctor
        public CEO(string name, short deptNo, short basic) : base(name, deptNo, basic)
        { 
            
        }
        #endregion CEOctor

        #region CEOMethod
        public sealed override decimal CalcNetSalary()
        {
            return (basic * 1.1M);
        }
        #endregion CEOMethod
    }
}
